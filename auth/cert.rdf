
<!-- Processed by Id: cwm.py,v 1.197 2007/12/13 15:38:39 syosi Exp -->
<!--     using base file:///Users/hjs/Programming/w3.org/WWW/ns/auth/cert.n3-->


<rdf:RDF xmlns="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:dc="http://purl.org/dc/terms/"
    xmlns:foaf="http://xmlns.com/foaf/0.1/"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:skos="http://www.w3.org/2004/02/skos/core#"
    xmlns:vs="http://www.w3.org/2003/06/sw-vocab-status/ns#">

    <owl:Ontology rdf:about="cert">
        <dc:created rdf:datatype="http://www.w3.org/2001/XMLSchema#date">2008-11-13</dc:created>
        <comment>
   Ontology for Certificates and crypto stuff.
   This is in development. 
   Some other ontologies to look at:
     * http://www.w3.org/2000/10/swap/crypto
        + has cwm builtins: http://www.w3.org/2000/10/swap/doc/Trust
        - a bit old perhaps. It imports daml+oil
        - would help to be more completely specified
        - uses literals as subjects a little liberally, which makes this a 
        bit difficult to work with frameworks that don't permit this
     * http://xmlns.com/wot/0.1/
        - limited very much to PGP (though on can map PGP to X509)
        - a little coarse grained, mixes up the PGP certificate with the PGP
          public key
     *
   Todo: 
     - add some classes and relations for DSA
     - should this all be in one file? Or should this be cut up a little? Say one file for the general CERT ontology, and then files for RSA, DSA, PGP, etc... Or perhaps it does not really matter?
     - expand more on the certification side of things
     - verify this by security experts
     - owl2 has some constructs for combined inverse functional properties. 
       This may be useful to use in defining an RSA key which is identified
       by two numbers.
     - also create html version of the spec by using this as a template.
     - should comments such as this be in html?
     - add more todos
   </comment>
        <seeAlso rdf:resource="X509Uml.svg"/>
        <seeAlso rdf:resource="rsa"/>
        <seeAlso rdf:resource="http://lists.foaf-project.org/mailman/listinfo/foaf-protocols"/>
        <vs:term_status>unstable</vs:term_status>
        <foaf:maker rdf:resource="http://bblfish.net/people/henry/card#me"/>
    </owl:Ontology>

    <owl:Class rdf:about="cert#Certificate">
        <comment>A certificate is a Document that is signed.
    As explained here http://www.pgpi.org/doc/pgpintro/#p16
    'A digital certificate consists of three things:
        * A public key.
        * Certificate information. ('Identity' information about the  
          user, such as name, user ID, and so on.)
        * One or more digital signatures.'
    </comment>
        <subClassOf rdf:resource="http://xmlns.com/foaf/0.1/Document"/>
        <vs:term_status>unstable</vs:term_status>
    </owl:Class>

    <owl:Class rdf:about="cert#Key">
        <comment>the class of keys</comment>
        <vs:term_status>unstable</vs:term_status>
    </owl:Class>

    <owl:Class rdf:about="cert#PGPCertificate">
        <comment>the class of PGP Certificates</comment>
        <subClassOf rdf:resource="cert#Certificate"/>
        <owl:equivalentClass rdf:resource="http://xmlns.com/wot/0.1/PubKey"/>
        <vs:term_status>unstable</vs:term_status>
    </owl:Class>

    <owl:Class rdf:about="cert#PrivateKey">
        <comment>Private Key</comment>
        <subClassOf rdf:resource="cert#Key"/>
    </owl:Class>

    <owl:Class rdf:about="cert#PublicKey">
        <comment>Public Key</comment>
        <subClassOf rdf:resource="cert#Key"/>
        <vs:term_status>unstable</vs:term_status>
    </owl:Class>

    <owl:Class rdf:about="cert#Signature">
        <comment>the class of signtatures</comment>
        <vs:term_status>unstable</vs:term_status>
    </owl:Class>

    <owl:Class rdf:about="cert#X509Certificate">
        <comment>the class of X509 Certificates</comment>
        <seeAlso rdf:resource="http://en.wikipedia.org/wiki/X509"/>
        <subClassOf rdf:resource="cert#Certificate"/>
        <vs:term_status>unstable</vs:term_status>
    </owl:Class>

    <owl:DatatypeProperty rdf:about="cert#decimal">
        <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#InverseFunctionalProperty"/>
        <comment xml:lang="en">
      An encoding of an integer in base 10 notation. Use cert:int instead.
    </comment>
        <domain rdf:resource="http://www.w3.org/2001/XMLSchema#nonNegativeInteger"/>
        <range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <vs:term_status>archaic</vs:term_status>
        <skos:editorialNote xml:lang="en">
      The name for this relation is not good. Even though Decimal is clearly defined as numbers in base 10 notation ( conf http://en.wikipedia.org/wiki/Decimal ), it is most often understood as refering to numbers with decimal fractions, which in cryptgraphic integer arithmetic do not turn up. 
    Instead one should use cert:int
   </skos:editorialNote>
    </owl:DatatypeProperty>

    <Datatype rdf:about="cert#hex">
        <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
        <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#InverseFunctionalProperty"/>
        <comment xml:lang="en">
   An encoding of a positive integer (from 0 to infinity) as a hexadecimal string that makes it easy to read and/or fun to present on the web. 
   The purpose of this way of representing hexadecimals is to enable users to copy and paste hexadecimal notations as shown by most browsers, keychains or tools such as opensso, into their rdf representation of choice.  There are a wide variety of ways in which such strings can be presented. One finds the following 

  e1 dc d5 e1 00 8f 21 5e d5 cc 7c 7e c4 9c ad 86 
  64 aa dc 29 f2 8d d9 56 7f 31 b6 bd 1b fd b8 ee 
  51 0d 3c 84 59 a2 45 d2 13 59 2a 14 82 1a 0f 6e 
  d3 d1 4a 2d a9 4c 7e db 90 07 fc f1 8d a3 8e 38 
  25 21 0a 32 c1 95 31 3c ba 56 cc 17 45 87 e1 eb 
  fd 9f 0f 82 16 67 9f 67 fa 91 e4 0d 55 4e 52 c0 
  66 64 2f fe 98 8f ae f8 96 21 5e ea 38 9e 5c 4f 
  27 e2 48 ca ca f2 90 23 ad 99 4b cc 38 32 6d bf  

 Or the same as the above, with ':' instead of spaces. We can't guarantee that these are the only ways such tools will present hexadecimals, so we are very lax.
 The letters can be uppercase or lowercase, or mixed.  
 Some strings may start with initial 00's, and can be stripped in this notation as they often are. Doing this could, in complement of 2 notation turn a positive number into a negative one, if the first hexadecimal character happens to be one of  the set {'8', '9', 'a', 'A', 'b', 'B', 'c', 'C', 'd', 'D', 'e', 'E', 'f', 'F'} .  As we interpret this string as a hexadecimal number leading 00s are not important  (Complement of 2 notation and hexadecimal overlap for positive numbers)
 In order to make this fun, we allow any unicode characters in the string. A parser should 
  1. remove all non hexadecimal characters
  2. treat the resulting as a hexadecimal representation of a number
 This will allow people to make an ascii - better yet a UTF-8 - picture of their public key when publishing it on the web.
   </comment>
        <domain rdf:resource="http://www.w3.org/2001/XMLSchema#nonNegativeInteger"/>
        <label xml:lang="en">hexadecimal</label>
        <range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
        <seeAlso rdf:resource="http://en.wikipedia.org/wiki/Hexadecimal"/>
        <owl:equivalentClass rdf:resource="http://www.w3.org/2001/XMLSchema#nonNegativeInteger"/>
        <vs:term_status>unstable</vs:term_status>
        <skos:editorialNote xml:lang="en">
     This relation should slowly be transited to just being a datatype.
     Being a datatype and a property is legal as explained here
   http://lists.w3.org/Archives/Public/semantic-web/2010Mar/0037.html 
 But it may be somewhat confusing, especially if it goes against a pattern - still to be set - by the xsd datatypes as the follow up email makes clear. 
   </skos:editorialNote>
    </Datatype>

    <rdf:Property rdf:about="cert#identity">
        <comment>
    the identity of the public key. This is the entity that knows the private key and so can decrypt messages encrypted with the public key, or encrypt messages that can be decrypted with the public key. It can be an Agent, or an idirect identifier of an agent such as a foaf:OnlineAccount .
    Should one specify the range as being the union of those two classes, or should one leave this open?
    </comment>
        <domain rdf:resource="cert#PublicKey"/>
        <vs:term_status>unstable</vs:term_status>
    </rdf:Property>

    <Datatype rdf:about="cert#int">
        <comment xml:lang="en">
      A positive integer in base 10 notation.
      xsd:nonNegativeInteger could be used, but is a bit long to write, and may be too strictly defined. 
      This is here to provice a pair with cert:hex, to avoid needing to import a new namespace, and to give a bit more flexibility in the future.
   </comment>
        <owl:equivalentClass rdf:resource="http://www.w3.org/2001/XMLSchema#nonNegativeInteger"/>
        <vs:term_status>unstable</vs:term_status>
        <skos:editorialNote xml:lang="en">
      We may decide to make it easier to write integers than what xsd:integer provides, if needed.
   </skos:editorialNote>
    </Datatype>

    <rdf:Property rdf:about="cert#public_key">
        <comment>
    relates the private key to the public key component, in a public/private
    key pair.
    </comment>
        <domain rdf:resource="cert#PrivateKey"/>
        <range rdf:resource="cert#PublicKey"/>
        <vs:term_status>unstable</vs:term_status>
    </rdf:Property>
</rdf:RDF>
